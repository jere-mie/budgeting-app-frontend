{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","screens/ForgotPasswordScreen.tsx","screens/NotFoundScreen.tsx","components/Button.tsx","components/generated.ts","screens/SignInScreen.tsx","screens/SignUpScreen.tsx","screens/WelcomeScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf","assets/images/image_placeholder.png"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","btnBackground","btnText","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","ForgotPasswordScreen","navigation","styles","container","Modal","animationType","transparent","visible","onRequestClose","goBack","centeredView","Ionicons","close","name","size","onPress","title","width","height","viewBox","fill","clip-path","d","cx","cy","r","id","contactemail","StyleSheet","create","flex","alignItems","justifyContent","fontWeight","fontSize","textAlign","display","alignSelf","marginVertical","marginHorizontal","borderRadius","padding","paddingBottom","shadowColor","shadowOffset","shadowOpacity","shadowRadius","separator","link","marginTop","paddingVertical","linkText","NotFoundScreen","TouchableOpacity","replace","Button","bgColor","txtColor","GetPasswordHashDocument","LogInForm","username","password","setUsername","setPassword","SafeAreaView","textfields","TextInput","input","placeholder","onChangeText","value","secureTextEntry","SignInScreen","React","useState","useLazyQuery","variables","triggerLogin","loading","data","error","signIn","__typename","navigate","helpLink","helpLinkText","console","log","handleLogin","margin","borderWidth","paddingHorizontal","borderColor","marginBottom","fpassword","button","helpContainer","testContainer","SignUpScreen","fname","setFname","lname","setLname","email","setEmail","phone","setPhone","pwordConfirm","setPwordConfirm","check","setCheck","pwordCheck","setPwordCheck","emailCheck","setEmailCheck","phoneCheck","setPhoneCheck","hidePword","setHidePword","useMutation","gql","CREATE_USER","onCompleted","createUser","onError","Alert","alert","message","RequiredField","ScrollView","replaceAll","onBlur","test","pwordfield","FontAwesome","icon","lengthCheck","length","lettersCheck","numberCheck","specialCheck","reqs","pword","newPhone","phoneArray","substring","FormatPhone","keyboardType","accessibilityLabel","paddingTop","flexDirection","WelcomeScreen","Image","image","source","require","_","registerCaption","linking","prefixes","Linking","config","screens","Welcome","SignIn","SignUp","ForgotPasswordModal","NotFound","Navigation","colorScheme","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","Navigator","Screen","component","options","headerShown","Group","screenOptions","presentation","client","ApolloClient","uri","cache","InMemoryCache","App","isLoadingComplete","setLoadingComplete","useEffect","a","async","SplashScreen","Font","font","warn","useCachedResources","ApolloProvider","StatusBar","ActivityIndicator","load","AppRegistry","registerComponent","module","exports"],"mappings":"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","file":"static/js/app.f7667ae9.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    btnBackground: 'hsl(213,10%,18%)',\n    btnText: 'hsl(0,0%,100%)',\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    btnBackground: 'hsl(0,50%,50%)',\n    btnText: 'hsl(0,0%,0%)', // TODO: test dark mode btn color scheme\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { Platform, StyleSheet, Button, Modal, TouchableOpacity } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nimport Graphql from '../components/Graphql';\nimport { useRoute } from '@react-navigation/native';\nimport { Svg, G, Circle, Rect, Path, ClipPath, Defs } from 'react-native-svg';\nimport { RootTabScreenProps } from '../types';\nimport { Ionicons } from '@expo/vector-icons';\n\nexport default function ForgotPasswordScreen({ navigation }: RootTabScreenProps<'Welcome'>) {\n  const contactemail = 'admin@admin.com'\n\n  return (\n    <View style={styles.container}>\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={true}\n        onRequestClose={() => { navigation.goBack() }}\n      >\n        <View style={styles.centeredView}>\n          <Ionicons style={styles.close} name='close' size={32} color='gray' onPress={() => navigation.goBack()} />\n          <Text style={styles.title}>We apologize for the inconvenience</Text>\n          <Svg width=\"205\" height=\"171\" viewBox=\"0 0 205 171\" fill=\"none\">\n            <G clip-path=\"url(#clip0_61_75)\">\n              <Path d=\"M26.5205 105.266C34.1031 90.4073 46.8399 78.722 62.4178 72.3325C77.9958 65.943 95.3816 65.2729 111.418 70.4441C127.454 75.6152 141.078 86.2846 149.814 100.515C158.55 114.745 161.82 131.591 159.029 147.995L146.445 145.915C148.731 132.48 146.053 118.682 138.898 107.027C131.743 95.373 120.585 86.6346 107.451 82.3994C94.3171 78.1641 80.0779 78.7129 67.3194 83.946C54.5609 89.1791 44.1292 98.7495 37.919 110.919L26.5205 105.266Z\" fill=\"#292D32\" />\n              <Circle cx=\"79\" cy=\"28\" r=\"9\" fill=\"#292D32\" />\n              <Circle cx=\"127\" cy=\"28\" r=\"9\" fill=\"#292D32\" />\n            </G>\n            <Defs>\n              <ClipPath id=\"clip0_61_75\">\n                <Rect width=\"205\" height=\"171\" fill=\"white\" />\n              </ClipPath>\n            </Defs>\n          </Svg>\n          <Text style={styles.contactemail}>Please contact <strong>{contactemail}</strong> for assistance with resetting your password.</Text>\n        </View>\n      </Modal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'gray'\n  },\n  title: {\n    fontWeight: 'bold',\n    fontSize: 32,\n    textAlign: 'center',\n    width: '80%'\n  },\n  contactemail: {\n    fontSize: 20,\n    justifyContent: 'center',\n    textAlign: 'center',\n    width: '80%',\n  },\n  close: {\n    display: \"flex\",\n    alignSelf: 'flex-start',\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: 'space-between',\n    alignItems: \"center\",\n    marginVertical: '20%',\n    marginHorizontal: '10%',\n    backgroundColor: \"white\",\n    borderRadius: 20,\n    padding: 35,\n    paddingBottom: 50,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  }\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Welcome')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { StyleSheet, Touchable, TouchableOpacity, GestureResponderEvent } from 'react-native';\nimport { View, Text } from './Themed';\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\ntype ButtonProps = {\n    text: string;\n    onPress?: ((event: GestureResponderEvent) => void) | undefined;\n};\n\nexport default function Button(props: ButtonProps) {\n    const theme = useColorScheme();\n    const bgColor = Colors[theme].btnBackground;\n    const txtColor = Colors[theme].btnText;\n\n    return (\n        <TouchableOpacity onPress={props.onPress}>\n            <View style={[styles.container, { backgroundColor: bgColor }]}>\n                <Text style={[styles.text, { color: txtColor }]}>{props.text}</Text>\n            </View>\n        </TouchableOpacity>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: 250,\n        paddingVertical: 20,\n        borderRadius: 10,\n    },\n    text: {\n        fontWeight: 'bold',\n    }\n});\n","import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type CategoriesPayload = CategoriesSuccess | FailurePayload;\n\nexport type CategoriesSuccess = {\n  __typename?: 'CategoriesSuccess';\n  categories: Array<Maybe<Category>>;\n};\n\nexport type Category = {\n  __typename?: 'Category';\n  colourHex?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type CategoryPayload = CategorySuccess | FailurePayload;\n\nexport type CategorySuccess = {\n  __typename?: 'CategorySuccess';\n  category: Category;\n};\n\nexport type CreateUserPayload = CreateUserSuccess | FailurePayload;\n\nexport type CreateUserSuccess = {\n  __typename?: 'CreateUserSuccess';\n  passwordHash: Scalars['String'];\n  user: User;\n};\n\nexport type DeleteCategoryPayload = DeleteSuccess | FailurePayload;\n\nexport type DeleteSuccess = {\n  __typename?: 'DeleteSuccess';\n  successMessage?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteUserPayload = DeleteSuccess | FailurePayload;\n\nexport type FailurePayload = {\n  __typename?: 'FailurePayload';\n  errorMessage?: Maybe<Scalars['String']>;\n  exceptionName?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createCategory: CategoryPayload;\n  deleteCategory: DeleteCategoryPayload;\n  deleteUser: DeleteUserPayload;\n  signUp: CreateUserPayload;\n};\n\n\nexport type MutationCreateCategoryArgs = {\n  colourHex: Scalars['String'];\n  description?: InputMaybe<Scalars['String']>;\n  name: Scalars['String'];\n  passwordHash: Scalars['String'];\n};\n\n\nexport type MutationDeleteCategoryArgs = {\n  id: Scalars['Int'];\n  passwordHash: Scalars['String'];\n};\n\n\nexport type MutationDeleteUserArgs = {\n  passwordHash: Scalars['String'];\n};\n\n\nexport type MutationSignUpArgs = {\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  password: Scalars['String'];\n  phoneNumber?: InputMaybe<Scalars['String']>;\n  username: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  categories: CategoriesPayload;\n  category: CategoryPayload;\n  greeting: Scalars['String'];\n  /** # Helper for testing. */\n  signIn: SignInPayload;\n  user?: Maybe<User>;\n};\n\n\nexport type QueryCategoriesArgs = {\n  passwordHash: Scalars['String'];\n};\n\n\nexport type QueryCategoryArgs = {\n  id: Scalars['Int'];\n  passwordHash: Scalars['String'];\n};\n\n\nexport type QuerySignInArgs = {\n  password: Scalars['String'];\n  username: Scalars['String'];\n};\n\n\nexport type QueryUserArgs = {\n  username: Scalars['String'];\n};\n\nexport type SignInPayload = FailurePayload | SignInSuccess;\n\nexport type SignInSuccess = {\n  __typename?: 'SignInSuccess';\n  passwordHash: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  phoneNumber?: Maybe<Scalars['String']>;\n  username: Scalars['String'];\n};\n\nexport type GetPasswordHashQueryVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type GetPasswordHashQuery = { __typename?: 'Query', signIn: { __typename: 'FailurePayload', exceptionName?: string | null, errorMessage?: string | null } | { __typename: 'SignInSuccess', passwordHash: string } };\n\n\nexport const GetPasswordHashDocument = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getPasswordHash\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}},{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"password\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"signIn\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"username\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"password\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"password\"}}}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"SignInSuccess\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"passwordHash\"}}]}},{\"kind\":\"InlineFragment\",\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"FailurePayload\"}},\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"exceptionName\"}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"errorMessage\"}}]}}]}}]}}]} as unknown as DocumentNode<GetPasswordHashQuery, GetPasswordHashQueryVariables>;","import React from \"react\"\nimport { StyleSheet, SafeAreaView, TextInput, Alert, TouchableOpacity, Pressable, Modal  } from 'react-native';\nimport Button from \"../components/Button\";\n\nimport Colors from '../constants/Colors';\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from \"../types\";\nimport { useLazyQuery, useQuery } from '@apollo/client';\n//import Graphql from \"../components/Graphql\";\nimport { GetPasswordHashDocument, GetPasswordHashQuery } from \"../components/generated\";\n\nconst LogInForm = (props:any) => {\n  // setUsername: Function, setPassword: Function, username: string, password: string\n  const { username,password,setUsername,setPassword} = props\n  \n\n  return(\n    <SafeAreaView>\n      <View style= {styles.textfields}>\n        <TextInput \n          style = {styles.input}\n          placeholder = \"Username\"\n          onChangeText={username => setUsername(username)}\n          value = {username}\n          >\n        </TextInput>\n        \n        <TextInput \n          style = {styles.input}\n          placeholder = \"Password\"\n          onChangeText={password => setPassword(password)}\n          value = {password}\n          secureTextEntry={true}\n          >\n        </TextInput>\n      </View>\n\n      \n    </SafeAreaView>\n  );\n};\n\n\n\nexport default function SignInScreen({navigation}: RootStackScreenProps<'SignIn'>) {\n  const [signInStatus, setSignInStatus] = React.useState(null);\n  const [username, setUsername] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n\n  const [triggerLogin, { loading, error, data }] = useLazyQuery<GetPasswordHashQuery>(GetPasswordHashDocument,{\n    variables: {username,password}\n  });\n\n    const handleLogin = (username: String, password: String) =>{\n      console.log(\"username\", username, \"pass\",password);\n      triggerLogin();\n      //graph ql query here\n      //checker\n      //setSignInStatus(\"verified\")\n      //setSignInStatus(\"un-authenticated\")\n    }\n\n    if(!loading && data?.signIn.__typename == \"SignInSuccess\"){\n      navigation.navigate('ForgotPasswordModal')\n    }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign into your account</Text>\n      <LogInForm\n       username={username}\n       password={password}\n       setUsername={setUsername}\n       setPassword={setPassword}></LogInForm>\n      <TouchableOpacity onPress={() => navigation.navigate('ForgotPasswordModal')} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Forgot Password?\n          </Text>\n      </TouchableOpacity>\n\n      <Button text=\"Sign In\" onPress={() => handleLogin(username,password)}></Button>\n\n      {!loading && <Text>{data?.signIn.__typename == \"SignInSuccess\" ? \"Successful sign in\": \"Failed sign in\"}</Text> }\n    </View>\n  );\n}\n\n\n\nfunction checkInfo(username: String, password: String){\n\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    width: 150,\n    textAlign: 'center',\n    margin: 20,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderColor: '#ccc',\n    borderRadius: 15,\n  },\n  textfields: {\n    marginBottom: 100,\n  },\n  fpassword: {\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 50\n  },\n  button: {\n    paddingVertical: 5,\n    paddingHorizontal: 5,\n    borderColor: '#ccc',\n    borderRadius: 50,\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n  helpContainer: {\n    marginTop: 5,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n  testContainer: {\n    marginTop: 20,\n    marginHorizontal: 20,\n    alignItems: 'center'\n  }\n});","import { gql, useMutation } from '@apollo/client';\nimport React, { useState } from 'react';\nimport { Alert, Button, ScrollView, StyleSheet, TextInput } from 'react-native';\nimport { FontAwesome } from '@expo/vector-icons';\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\n\nconst CREATE_USER = (fname: string, lname: string, username: string, email: string, phone: string, password: string) => gql`\n  mutation CREATE_USER {\n    createUser(\n      firstName: \"${fname}\",\n      lastName: \"${lname}\",\n      username: \"${username}\",\n      email: \"${email}\",\n      phoneNumber: \"${phone}\",\n      password:\"${password}\"\n    ){\n      hashAuth\n    }\n  }\n`;\n\nexport default function SignUpScreen({ navigation }: RootTabScreenProps<'SignUp'>) {\n\n  const [username, setUsername] = useState(\"\")\n  const [fname, setFname] = useState(\"\")\n  const [lname, setLname] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [phone, setPhone] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [pwordConfirm, setPwordConfirm] = useState(\"\")\n  const [check, setCheck] = useState(false)\n  const [pwordCheck, setPwordCheck] = useState(false)\n  const [emailCheck, setEmailCheck] = useState(false)\n  const [phoneCheck, setPhoneCheck] = useState(false)\n  const [hidePword, setHidePword] = useState(true)\n\n  // Create user graphql query\n  const [createUser] = useMutation(CREATE_USER(fname, lname, username, email, phone, password), {\n    onCompleted: (data => {\n      data = data.createUser;\n      navigation.navigate(\"SignIn\");\n    }),\n    onError: (error => {\n      Alert.alert(\"Something went wrong\")\n      console.log(error.message);\n    })\n  })\n\n  const register = () => {\n    setCheck(true);\n    if (password && fname && username && email) {\n      createUser();\n    }\n  }\n\n  function RequiredField({ input }: { input: string }) {\n    return (\n      (!check || input) ? (\n        <></>\n      ) : (\n        <Text style={styles.alert}>this field is required</Text>\n      ))\n  }\n\n  function PasswordRules() {\n    let lengthCheck = password.length >= 8;\n    let lettersCheck = /([A-Z].?[a-z])|([a-z].?[A-Z])/.test(password);\n    let numberCheck = /\\d/.test(password);\n    let specialCheck = /[^A-Za-z0-9]/.test(password);\n    if (lettersCheck && lengthCheck && numberCheck && specialCheck) {\n      return (<></>);\n    }\n    return (\n      <View>\n        <Text style={styles.reqs}>Password requirements:</Text>\n        {lengthCheck ? (<></>) : (<Text style={styles.reqs}> - 8 characters minimum</Text>)}\n        {lettersCheck ? (<></>) : (<Text style={styles.reqs}> - Upper and lower case letters</Text>)}\n        {numberCheck ? (<></>) : (<Text style={styles.reqs}> - At least one number</Text>)}\n        {specialCheck ? (<></>) : (<Text style={styles.reqs}> - At least one special character</Text>)}\n      </View>\n    )\n  }\n\n  function CheckEmail() {\n    let emailRegex = /^[^/\\\\*;:,{}\\[\\]()$?]+@+[^/\\\\~`*;:,|{}\\[\\]=()%$?]+[.]{1}[^/\\\\~`*;:,|{}\\[\\]=()%$?]+$/;\n    if (!emailCheck || !email || emailRegex.test(email)) {\n      return (<></>);\n    } else {\n      return (\n        <Text style={styles.alert}>Invalid email address</Text>\n      )\n    }\n  }\n\n  function CheckPhone() {\n    let phoneRegex = /^[0-9]{7,15}$/;\n    if (!phoneCheck || !phone || phoneRegex.test(phone)) {\n      return (<></>);\n    } else {\n      return (\n        <Text style={styles.alert}>Invalid phone number</Text>\n      )\n    }\n  }\n\n  function FormatPhone(newPhone: string) {\n    let phoneArray = newPhone.substring(1).replaceAll(/[^0-9]/g, \"\");\n    setPhone(phoneArray);\n    setPhoneCheck(false);\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Create a New Account</Text>\n      <ScrollView style={styles.separator}>\n        <TextInput\n          style={styles.input}\n          onChangeText={(fname) => setFname(fname)}\n          value={fname}\n          placeholder=\"First Name*\"\n        />\n        <RequiredField input={fname} />\n        <TextInput\n          style={styles.input}\n          onChangeText={(lname) => setLname(lname)}\n          value={lname}\n          placeholder=\"Last Name\"\n        />\n        <TextInput\n          style={styles.input}\n          onChangeText={(username) => setUsername(username)}\n          value={username}\n          placeholder=\"Username*\"\n        />\n        <RequiredField input={username} />\n        <TextInput\n          style={styles.input}\n          onChangeText={(email) => { setEmail(email.replaceAll(/\\s+/g, \"\")); setEmailCheck(false) }}\n          onBlur={() => setEmailCheck(true)}\n          value={email}\n          placeholder=\"Email*\"\n        />\n        <CheckEmail/>\n        <RequiredField input={email}/>\n        <View style={styles.pwordfield}>\n          <TextInput\n              onChangeText={(password) => setPassword(password)}\n              value={password}\n              secureTextEntry={hidePword}\n              placeholder=\"Password*\"\n          />\n          <FontAwesome style={styles.icon} name={hidePword? (\"eye\") : (\"eye-slash\")} size={15} onPress={() => setHidePword(!hidePword)}/>\n        </View>\n        <RequiredField input={password}/>\n        <PasswordRules/>\n        <TextInput\n          style={styles.input}\n          onChangeText={(pword) => { setPwordConfirm(pword); setPwordCheck(false) }}\n          onBlur={() => setPwordCheck(true)}\n          value={pwordConfirm}\n          secureTextEntry={hidePword}\n          placeholder=\"Confirm Password*\"\n        />\n        {(!pwordCheck || (pwordConfirm === password)) ? (\n          <RequiredField input={pwordConfirm} />\n        ) : (\n          (<Text style={styles.alert}>password fields need to match</Text>)\n        )}\n        <TextInput\n          style={styles.input}\n          onChangeText={(newPhone) => FormatPhone(newPhone)}\n          onBlur={() => setPhoneCheck(true)}\n          value={'+' + phone}\n          keyboardType=\"phone-pad\"\n          placeholder=\"Phone Number\"\n        />\n        <CheckPhone />\n        <Button\n          onPress={() => register()}\n          title=\"Sign Up\"\n          color=\"#0b5394\"\n          accessibilityLabel=\"Sign Up Button\"\n        />\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  input: {\n    height: 40,\n    margin: 5,\n    borderWidth: 1,\n    padding: 10,\n  },\n  title: {\n    paddingTop: 20,\n    fontSize: 32,\n    // Not a system font on Android\n    // fontFamily: 'Gill Sans MT', \n    marginHorizontal: 25,\n    marginVertical: 10,\n    textAlign: 'center',\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 20,\n    height: 1,\n  },\n  alert: {\n    color: 'red',\n    marginHorizontal: 5,\n    marginBottom: 8,\n  },\n  reqs: {\n    color: 'gray',\n    fontSize: 14,\n    marginHorizontal: 5,\n    marginBottom: 1,\n  },\n  icon: {\n    marginHorizontal: 5,\n  },\n  pwordfield: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    height: 40,\n    margin: 5,\n    borderWidth: 1,\n    padding: 10,\n  }\n});\n","import { GestureResponderEvent, StyleSheet, Image } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\nimport Button from '../components/Button';\n\nexport default function WelcomeScreen({ navigation }: RootTabScreenProps<'Welcome'>) {\n  function onPressSignIn(_: GestureResponderEvent) {\n    navigation.navigate('SignIn');\n  }\n\n  function onPressSignUp(_: GestureResponderEvent) {\n    navigation.navigate('SignUp');\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Welcome to</Text>\n      <Text style={styles.title}>[AppName]!</Text>\n      <Image style={styles.image} source={require('../assets/images/image_placeholder.png')}></Image>\n      <Button text=\"Sign in\" onPress={onPressSignIn}></Button>\n      <Text style={styles.registerCaption}>Don't have an account?</Text>\n      <Button text=\"Create an account\" onPress={onPressSignUp}></Button>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  image: {\n    height: 150,\n    width: 200,\n    marginVertical: 80\n  },\n  registerCaption: {\n    fontWeight: 'bold',\n    marginTop: 20,\n    marginBottom: 5,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  }\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.createURL('/')],\n  config: {\n    screens: {\n      Welcome: '',\n      SignIn: 'login',\n      SignUp: 'register',\n      ForgotPasswordModal: 'ForgotPassword',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { FontAwesome } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName, Pressable } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nimport ForgotPasswordScreen from '../screens/ForgotPasswordScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport SignInScreen from '../screens/SignInScreen';\nimport SignUpScreen from '../screens/SignUpScreen';\nimport WelcomeScreen from '../screens/WelcomeScreen';\nimport { RootStackParamList, RootTabParamList, RootTabScreenProps } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// declare global {\n//   namespace ReactNavigation{\n//     interface RootParamList {\n//       ForgotPasswordModal: { name: string};\n//     }\n//   }\n// }  \n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying ForgotPasswords on top of all other content.\n * https://reactnavigation.org/docs/ForgotPassword\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator>\n      <Stack.Screen name=\"Welcome\" component={WelcomeScreen} options={{ headerShown: false }} />\n      <Stack.Screen name=\"SignUp\" component={SignUpScreen} options={{ headerShown: false }} />\n      <Stack.Screen name=\"SignIn\" component={SignInScreen} options={{ headerShown: false }} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ headerShown: false, title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"ForgotPasswordModal\" component={ForgotPasswordScreen} options={{ headerShown: false, title: 'Oops!' }} />\n      </Stack.Group>\n    </Stack.Navigator >\n  );\n}\n\n\n/**\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\n * https://reactnavigation.org/docs/bottom-tab-navigator\n*/\n/**\nconst BottomTab = createBottomTabNavigator<RootTabParamList>();\n\nfunction BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      screenOptions={{\n        tabBarActiveTintColor: Colors[colorScheme].tint,\n      }}>\n      <BottomTab.Screen\n        name=\"SignIn\"\n        component={SignInScreen}\n        options={({ navigation }: RootTabScreenProps<'TabOne'>) => ({\n          title: 'Sign In',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n          // headerRight: () => (\n          //   <Pressable\n          //     onPress={() => navigation.navigate('')}\n          //     style={({ pressed }) => ({\n          //       opacity: pressed ? 0.5 : 1,\n          //     })}>\n          //     <FontAwesome\n          //       name=\"info-circle\"\n          //       size={25}\n          //       color={Colors[colorScheme].text}\n          //       style={{ marginRight: 15 }}\n          //     />\n          //   </Pressable>\n          // ),\n        })}\n      />\n      <BottomTab.Screen\n        name=\"SignUp\"\n        component={SignUpScreen}\n        options={{\n          title: 'Sign Up',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n*/\n\n/**\n * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\n */\n/**\nfunction TabBarIcon(props: {\n  name: React.ComponentProps<typeof FontAwesome>['name'];\n  color: string;\n}) {\n  return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n*/\n","import { ActivityIndicator, AppRegistry, StyleSheet } from 'react-native';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink } from '@apollo/client';\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { StatusBar } from 'expo-status-bar';\n\n// Initialize Apollo Client\nconst client = new ApolloClient({\n  uri: 'http://localhost:9090/graphql',\n  cache: new InMemoryCache()\n});\n\nAppRegistry.registerComponent('MyApplication', () => App);\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return (<ActivityIndicator size='large' style={styles.load} />);\n  } else {\n    return (\n      <ApolloProvider client={client}>\n        <SafeAreaProvider>\n          <Navigation colorScheme={colorScheme} />\n          <StatusBar />\n        </SafeAreaProvider>\n      </ApolloProvider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  load: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  }\n});","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","module.exports = __webpack_public_path__ + \"static/media/image_placeholder.35cad1d4.png\";"],"sourceRoot":""}